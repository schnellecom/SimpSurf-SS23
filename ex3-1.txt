LoadPackage("SimplicialSurface");;

#can apparently also be done with Reversed(list);
ReverseList:=function(list)
	local i;
	res := [];
	for i in [0..Length(list)-1] do
		if IsBound(list[Length(list)-i]) then
			Add(res, list[Length(list)-i]);
		fi;
	od;
	return res;
end;

InterateList:=function(list)
	local i;
	res := [];
	res[1] := list[Length(list)];
	for i in [2..Length(list)] do
		if IsBound(list[i-1]) then
			Add(res, list[i-1]);
		fi;
	od;
	return res;
end;

AllSimplexRings:=function(n)
	local i;
	partitions := Partitions(n);
	dyclets := [];
	for part in partitions do
		for sigma in SymmetricGroup(n) do
			Add(dyclets, Permuted(part, sigma));
		od;
	od;
	for d in dyclets do
		pos := Position(dyclets, d);
		for e in dyclets do
			if ReverseList(d) = e then
				Remove(dyclets, pos);
			fi;
			for i in [1..n] do
				if InterateList(d) = e then
					Remove(dyclets, pos);
				fi;
				d = InterateList(d);
			od;
		od;
	od;
end;